<?xml version="1.0"?>
<doc>
    <assembly>
        <name>fo-dicom.json</name>
    </assembly>
    <members>
        <member name="T:FellowOakDicom.Serialization.JsonDicomConverter">
            <summary>
            Converts a DicomDataset object to and from JSON using the NewtonSoft Json.NET library
            </summary>
        </member>
        <member name="M:FellowOakDicom.Serialization.JsonDicomConverter.#ctor(System.Boolean,System.Boolean,FellowOakDicom.Serialization.NumberSerializationMode)">
            <summary>
            Initialize the JsonDicomConverter.
            </summary>
            <param name="writeTagsAsKeywords">Whether to write the json keys as DICOM keywords instead of tags. This makes the json non-compliant to DICOM JSON.</param>
            <param name="autoValidate">Whether the content of DicomItems shall be validated when deserializing.</param>
            <param name="numberSerializationMode">Defines how numbers should be serialized. Default 'AsNumber', will throw errors when a number is not parsable.</param>
        </member>
        <member name="M:FellowOakDicom.Serialization.JsonDicomConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:FellowOakDicom.Serialization.JsonDicomConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:FellowOakDicom.Serialization.JsonDicomConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FellowOakDicom.Serialization.JsonDicomConverter.CreateBulkDataUriByteBuffer(System.String)">
            <summary>
            Create an instance of a IBulkDataUriByteBuffer. Override this method to use a different IBulkDataUriByteBuffer implementation in applications.
            </summary>
            <param name="bulkDataUri">The URI of a bulk data element as defined in <see cref="!:http://dicom.nema.org/medical/dicom/current/output/chtml/part19/chapter_A.html#table_A.1.5-2">Table A.1.5-2 in PS3.19</see>.</param>
            <returns>An instance of a Bulk URI Byte buffer.</returns>
        </member>
        <member name="M:FellowOakDicom.Serialization.JsonDicomConverter.FixDecimalString(System.String)">
            <summary>
            Fix-up a Dicom DS number for use with json.
            Rationale: There is a requirement that DS numbers shall be written as json numbers in part 18.F json, but the
            requirements on DS allows values that are not json numbers. This method "fixes" them to conform to json numbers.
            </summary>
            <param name="val">A valid DS value</param>
            <returns>A json number equivalent to the supplied DS value</returns>
        </member>
    </members>
</doc>
